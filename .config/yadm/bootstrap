#!/usr/bin/env python3

import os
import subprocess
import logging
from sys import exit
from time import perf_counter
from colorama import Fore, init

"""
 ██ ▄█▀▄▄▄       ██▓     ██▓ ██▀███   ██▓ ▄████▄  ▓█████ 
 ██▄█▒▒████▄    ▓██▒    ▓██▒▓██ ▒ ██▒▓██▒▒██▀ ▀█  ▓█   ▀ 
▓███▄░▒██  ▀█▄  ▒██░    ▒██▒▓██ ░▄█ ▒▒██▒▒▓█    ▄ ▒███   
▓██ █▄░██▄▄▄▄██ ▒██░    ░██░▒██▀▀█▄  ░██░▒▓▓▄ ▄██▒▒▓█  ▄ 
▒██▒ █▄▓█   ▓██▒░██████▒░██░░██▓ ▒██▒░██░▒ ▓███▀ ░░▒████▒
▒ ▒▒ ▓▒▒▒   ▓▒█░░ ▒░▓  ░░▓  ░ ▒▓ ░▒▓░░▓  ░ ░▒ ▒  ░░░ ▒░ ░
░ ░▒ ▒░ ▒   ▒▒ ░░ ░ ▒  ░ ▒ ░  ░▒ ░ ▒░ ▒ ░  ░  ▒    ░ ░  ░
░ ░░ ░  ░   ▒     ░ ░    ▒ ░  ░░   ░  ▒ ░░           ░   
░  ░        ░  ░    ░  ░ ░     ░      ░  ░ ░         ░  ░
                                         ░               

https://gitlab.com/h0xt0n/kaliRice
This is a bootstrap script from YADM.
Made for Kali Linux. No dependencies required on Kali 2020.1 and further.
read README.txt for more information.
"""

# The following programs need to be readded to "install_dict" and their respective functions need to be updated (check the graveyard at the end of the file):
# noip2
# protonvpn
# signal
# discord
# steam
# todoist
# riot (AKA element, a matrix client)


class Install:
    """
    Holds install instructions
    """

    def __init__(self):
        self.user_home = os.path.expanduser("~")
        self.tmp_dir = "/tmp/yadmBootstrap"
        self.code_dir = "%s/code" % self.user_home

        if not os.path.exists(self.tmp_dir):
            os.mkdir(self.tmp_dir)
        if not os.path.exists(self.code_dir):
            os.mkdir(self.code_dir)

        self.init_log()

        self.install_dict = {
            # this dict should contain every install instruction, following the example:
            # "procedure_name": procedure_function
            # where the value ("procedure_name") is a string, and the key (procedure_function) is a function obj
            # e.g.: "spotify": self.install_spotify
            # the procedure_function (key) SHOULD NOT CONTAIN "()" AT THE END!

            # programs to be installed with apt-get install
            # comments are handy for identifcation 
            
            "firefox-esr": self.apt_package,
            "libreoffice": self.apt_package,
            "virtualbox": self.apt_package,
            "qbittorrent": self.apt_package,

            # tor stuff
            "tor": self.apt_package,
            "torsocks": self.apt_package,
            "torbrowser-launcher": self.apt_package,
            
            # zulu crypt stuff
            "zulucrypt-cli": self.apt_package,
            "zulucrypt-gui": self.apt_package,
            "zulumount-cli": self.apt_package,
            "zulumount-gui": self.apt_package,
            "zulupolkit": self.apt_package,
            "zulusafe-cli": self.apt_package,

            # youtube-dl stuff
            "ffmpeg": self.apt_package,             
            "ffmpegthumbnailer": self.apt_package,
            "atomicparsley": self.apt_package,      
            "imagemagick": self.apt_package,        

            # audio stuff
            "pulseaudio": self.apt_package,             # audio driver
            "alsamixergui": self.apt_package,           # audio driver
            "audacious": self.apt_package,              # music player
            "audacity": self.apt_package,               # music editor
            "soundconverter": self.apt_package,         # handy converter

            "guake": self.apt_package,                  # drop down terminal
            "flameshot": self.apt_package,              # scrrenshot program, like sharex
            "stacer": self.apt_package,                 # resource monitor
            "grub-customizer": self.apt_package,        # modify/customize grub
            "ranger": self.apt_package,                 # cli explorer
            "unclutter": self.apt_package,              # hides cursor after a while idle
            "redshift-gtk": self.apt_package,           # changes monitor temperature
            "mpv": self.apt_package,                    # video player
            "filezilla": self.apt_package,              # ftp/sftp client
            "htop": self.apt_package,                   # resource monitor
            "rofi": self.apt_package,                   # app launcher
            "ntpstat": self.apt_package,                # for ntp (network time protocol) stuff
            "detox": self.apt_package,                  # removes annoying stuff from filenames
            "xclip": self.apt_package,                  # for the "copy" alias
            "minder": self.apt_package,                 # mind-mapping program
            "neofetch": self.apt_package,               # better than screenfetch
            "gparted": self.apt_package,                # partition handler
            "atril": self.apt_package,                  # pdf/epub reader
            "apt-transport-https": self.apt_package,    # lib

            # programs to be installed with other methods
            "spotify": self.spotify,
            "vscode": self.vscode,
            "github-desktop": self.github_desktop,
            "etcher": self.etcher,
            "youtube-dl": self.youtube_dl,
            "pyown": self.pyown,
            "pywal": self.pywal,
            "ntp": self.ntp,

            # repos to be cloned
            "gitlab.com/h0xt0n/wallpapers": self.wallpapers,
            "gitlab.com/h0xt0n/bellumInstrumentum": self.bellumInstrumentum,
            "lscript": self.lscript,
            "hiddeneye": self.hiddeneye,
            "blackeye": self.blackeye,
            "firefox-security-toolkit": self.firefox_security_toolkit,

            # fonts
            "ubuntu-mono": self.ubuntu_mono,
            "jetbrains-mono": self.jetbrains_mono,
        }

    def init_log(self):
        """
        Initializes the log file
        :return: None
        """
        logging.basicConfig(
            filename="%s/log.txt" % self.tmp_dir,
            level=logging.WARNING,
            filemode="w",
            format="%(asctime)s : %(funcName)s : %(levelname)s : %(message)s"
        )

    def installer(self):
        """
        Handles all calls from self.install_dict
        :return: None
        """
        print("All these programs will be installed: ")
        for program in self.install_dict:
            print(program, end=" ")
        choice = str(input("\nTotal of %d operations. Continue? [Y/n]"
                           % len(self.install_dict)))
        if choice.lower() == "n":
            exit(0)
        count = 0
        dict_len = len(self.install_dict)
        print("Beginning installation... This may take a very long while. DO NOT QUIT WHILE IN PROGRESS!")
        print("Saving logs at: %s/log.txt" % self.tmp_dir)
        print("Running a apt update...", end="")
        run_command("sudo apt-get update")
        print(Fore.GREEN + " Done.")
        print()
        t = perf_counter()
        for program in self.install_dict:
            count += 1
            vcount = count
            if len(str(count)) < 2:
                count = str("0" + str(count))
            print("%s of %s: " % (str(count), str(dict_len)), end="")
            if self.install_dict[program] == self.apt_package:
                self.apt_package(program)
            else:
                self.install_dict[program]()
            count = vcount
        self.post_install()
        print(Fore.GREEN + '\033[1m' + "Bootstrap finished. Took %d seconds.\n" % int(perf_counter() - t) + '\033[0m')
        print("Remember to run:")
        print("1. run a full update: 'sudo apt update && sudo apt upgrade -y && sudo apt dist-upgrade -y && sudo apt "
              "full-upgrade -y && sudo apt autoremove -y && sudo apt update'")
        print("2. configure timezones: 'sudo tzselect'")
        print("3. edit sudoers by typing 'sudo visudo' and pasting '%s  ALL=(ALL) NOPASSWD:ALL' at the last line"
              % os.getlogin())
        print("And then rebooting.")
        print("The following programs may need to be configured:")
        print("firefox-esr, redshitft-gtk, vscode, noip2, spotify, protonvpn, signal, riot, "
              "discord, steam, todoist, lscript, hiddeneye, blackeye, firefox-security-toolbox.")
        exit(0)

    def post_install(self):
        """
        Holds post-install instructions
        :return: None
        """

        try:    # remove self.tmp_dir
            print("Removing temporary directory at %s..." % self.tmp_dir, end="")
            run_command("sudo rf -r %s" % self.tmp_dir)
            print(Fore.GREEN + " Done.")
        except Exception as e:
            print(Fore.RED + " Failed.")
            logging.error(e)

        try:    # run apt update
            print("Running a apt update...", end="")
            run_command("sudo apt-get update")
            print(Fore.GREEN + " Done.")
        except Exception as e:
            print(Fore.RED + " Failed.")
            logging.error(e)

        try:    # run updatedb
            print("Running a updatedb...", end="")
            run_command("sudo updatedb")
            print(Fore.GREEN + " Done.")
        except Exception as e:
            print(Fore.RED + " Failed.")
            logging.error(e)

        try:    # fix permissions at ~/
            print("Fixing permissions at ~/...", end="")
            run_command("sudo chown %s:%s ~/ --recursive" % (os.getlogin(), os.getlogin()))
            run_command("sudo chmod 750 ~/ --recursive")
            print(Fore.GREEN + " Done.")
        except Exception as e:
            print(Fore.RED + " Failed.")
            logging.error(e)

        try:    # add user to sudo group
            print("Adding user '%s' to sudo group..." % os.getlogin(), end="")
            run_command("sudo adduser %s sudo" % os.getlogin())
            print(Fore.GREEN + " Done.")
        except Exception as e:
            print(Fore.RED + " Failed.")
            logging.error(e)

    @staticmethod
    def install_apt_package(package):
        """
        Try to install a apt package
        :param package: Str, name of the package
        :return: True if successful, False if failed.
        """
        if not isinstance(package, str):
            raise TypeError("Argument 'package' is not a string.")
        package_install = "sudo apt-get install -y " + str(package)
        result = subprocess.run(package_install, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            return True
        else:
            logging.error("returned code value was '%d', stderr='%s'" % (result.returncode, result.stderr))
            return False

    def apt_package(self, package):
        """
        Used to install apt packages
        :param package: Str, package to be installed (program, lib, etc)
        :return: None, prints successful or failed attempts
        """
        if not isinstance(package, str):
            raise TypeError("'package' argument is not a string.")
        print("Downloading and installing %s..." % package, end="")
        if self.install_apt_package(package):
            print(Fore.GREEN + " Done.")
        else:
            print(Fore.RED + " Failed.")

    def ntp(self):
        print("Downloading and configuring ntp...", end="")
        try:
            self.install_apt_package("ntp")
            run_command("sudo systemctl stop ntp")
            run_command('echo "server 0.pool.ntp.org'
                        '\nserver 1.pool.ntp.org'
                        '\nserver 2.pool.ntp.org'
                        '\nserver 3.pool.ntp.org" | sudo tee /var/lib/ntp/ntp.drift')
            run_command('echo "server 0.pool.ntp.org'
                        '\nserver 1.pool.ntp.org'
                        '\nserver 2.pool.ntp.org'
                        '\nserver 3.pool.ntp.org" | sudo tee -a /etc/ntp.conf')
            run_command("sudo systemctl start ntp")
            run_command("sudo systemctl enable ntp")
            print(Fore.GREEN + " Done.")
        except Exception as e:
            logging.error(e)
            print(Fore.RED + " Failed.")

    def spotify(self):
        print("Downloading and installing spotify...", end="")
        try:
            run_command("curl -sS https://download.spotify.com/debian/pubkey_5E3C45D7B312C643.gpg | sudo apt-key add - ")
            run_command('echo "deb http://repository.spotify.com stable non-free" '
                        '| sudo tee /etc/apt/sources.list.d/spotify.list')
            run_command("sudo apt-get update && sudo apt-get install -y spotify-client")
            print(Fore.GREEN + " Done.")
        except Exception as e:
            logging.error(e)
            print(Fore.RED + " Failed.")

    def vscode(self):
        print("Downloading and installing vscode...", end="")
        try:
            run_command("sudo wget -qO- https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor > packages.microsoft.gpg")
            run_command("sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/")
            run_command("sudo sh -c 'echo \"deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main\" > /etc/apt/sources.list.d/vscode.list'")
            run_command("sudo rm -f packages.microsoft.gpg")
            run_command("sudo apt-get update && sudo apt-get install -y code")
            print(Fore.GREEN + " Done.")
        except Exception as e:
            logging.error(e)
            print(Fore.RED + " Failed.")

    def github_desktop(self):
        print("Downloading and installing github-desktop...", end="")
        try:
            run_command("wget -qO - https://packagecloud.io/shiftkey/desktop/gpgkey | sudo apt-key add -")
            run_command("sudo sh -c 'echo \"deb [arch=amd64] https://packagecloud.io/shiftkey/desktop/any/ any main\" > /etc/apt/sources.list.d/packagecloud-shiftky-desktop.list'")
            run_command("sudo apt-get update && sudo apt-get install -y github-desktop")
            print(Fore.GREEN + " Done.")
        except Exception as e:
            logging.error(e)
            print(Fore.RED + " Failed.")

    def etcher(self):
        print("Downloading and installing etcher...", end="")
        try:
            run_command("curl -1sLf \ 'https://dl.cloudsmith.io/public/balena/etcher/setup.deb.sh' \ | sudo -E bash")
            run_command("sudo apt update")
            run_command("sudo apt-get install balena-etcher-electron")
            print(Fore.GREEN + " Done.")
        except Exception as e:
            logging.error(e)
            print(Fore.RED + " Failed.")

    def youtube_dl(self):
        print("Downloading and installing youtube-dl...", end="")
        try:
            self.install_apt_package("python3-pip")
            run_command("sudo pip3 install youtube-dl")
            print(Fore.GREEN + " Done.")
        except Exception as e:
            logging.error(e)
            print(Fore.RED + " Failed.")

    def pyown(self):
        print("Downloading and installing pwown...", end="")
        try:
            self.install_apt_package("python3-pip")
            run_command("sudo pip3 install pwown")
            print(Fore.GREEN + " Done.")
        except Exception as e:
            logging.error(e)
            print(Fore.RED + " Failed.")

    def pywal(self):
        print("Downloading and installing pywal...", end="")
        try:
            self.install_apt_package("python3-pip")
            self.install_apt_package("imagemagick")
            run_command("sudo pip3 install pywal")
            print(Fore.GREEN + " Done.")
        except Exception as e:
            logging.error(e)
            print(Fore.RED + " Failed.")

    def wallpapers(self):
        print("Downloading wallpapers to ~/Pictures/wallpapers...", end="")
        try:
            if not os.path.exists(self.user_home + "/Pictures/wallpapers"):
                os.mkdir(self.user_home + "/Pictures/wallpapers")
            run_command("sudo git clone https://gitlab.com/h0xt0n/wallpapers.git ~/Pictures/wallpapers")
            print(Fore.GREEN + " Done.")
        except Exception as e:
            logging.error(e)
            print(Fore.RED + " Failed.")

    def lscript(self):
        print("Downloading and installing lscript...", end="")
        try:
            pwd_result = subprocess.run("pwd", shell=True, capture_output=True, text=True).stdout
            run_command("sudo git clone https://github.com/arismelachroinos/lscript.git ~/code/lscript")
            run_command("sudo chmod +x ~/code/lscript/install.sh")
            run_command("cd ~/code/lscript")
            run_command("./install.sh")
            run_command("cd %s" % pwd_result)
            print(Fore.GREEN + " Done.")
        except Exception as e:
            logging.error(e)
            print(Fore.RED + " Failed.")

    def hiddeneye(self):
        print("Downloading and installing hiddeneye...", end="")
        try:
            run_command("sudo git clone https://github.com/DarkSecDevelopers/HiddenEye.git ~/code/HiddenEye")
            self.install_apt_package("python3-pip")
            run_command("sudo chmod 750 --recursive ~/code/HiddenEye")
            run_command("sudo pip3 install -r ~/code/HiddenEye/requirements.txt")
            run_command("sudo pip3 install requests")
            print(Fore.GREEN + " Done.")
        except Exception as e:
            logging.error(e)
            print(Fore.RED + " Failed.")

    def blackeye(self):
        print("Downloading and installing blackeye...", end="")
        try:
            run_command("sudo git clone https://github.com/thelinuxchoice/blackeye ~/code/blackeye")
            run_command("sudo chmod 750 --recursive ~/code/blackeye")
            run_command("sudo chmod +x ~/code/blackeye/blackeye.sh")
            print(Fore.GREEN + " Done.")
        except Exception as e:
            logging.error(e)
            print(Fore.RED + " Failed.")

    def firefox_security_toolkit(self):
        print("Downloading firefox-security-toolkit to ~/code/firefox-security-toolkit...", end="")
        try:
            run_command("sudo git clone https://github.com/mazen160/Firefox-Security-Toolkit.git "
                        "~/code/Firefox-Security-Toolkit")
            run_command("sudo chmod 750 --recursive ~/code/Firefox-Security-Toolkit")
            run_command("sudo chmod +x ~/code/Firefox-Security-Toolkit/firefox_security_toolkit.sh")
            print(Fore.GREEN + " Done.")
        except Exception as e:
            logging.error(e)
            print(Fore.RED + " Failed.")

    def ubuntu_mono(self):
        print("Downloading and installing ubuntu mono font...", end="")
        try:
            self.install_apt_package("fonts-ubuntu")
            self.install_apt_package("fonts-ubuntu-console")
            self.install_apt_package("ttf-ubuntu-font-family")
            self.install_apt_package("fontconfig")
            run_command("sudo fc-cache -f -v")
            print(Fore.GREEN + " Done.")
        except Exception as e:
            logging.error(e)
            print(Fore.RED + " Failed.")

    def jetbrains_mono(self):
        version = "1.0.3"
        print("Downloading and installing jetbrains mono font...", end="")
        try:
            run_command("sudo wget -O %s/jetbrains-mono.zip "
                        "https://download.jetbrains.com/fonts/JetBrainsMono-2.242.zip"
                        % self.tmp_dir)
            run_command("sudo unzip %s/jetbrains-mono.zip -d %s" % (self.tmp_dir, self.tmp_dir))
            run_command("sudo cp %s/JetBrainsMono-%s/ttf/* /usr/local/share/fonts/" % (self.tmp_dir, version))
            self.install_apt_package("fontconfig")
            run_command("sudo fc-cache -f -v")
            print(Fore.GREEN + " Done.")
        except Exception as e:
            logging.error(e)
            print(Fore.RED + " Failed.")

def run_command(command):
    """
    Run a command
    e.g. wget, python, cat, ls, etc
    should be called like run_command("wget")
    :param command: Str, name of the command to be checked
    :return: True if return code is 0 (no errors), False if non-zero
    """
    if not isinstance(command, str):
        raise TypeError("Argument 'command' is not a string.")
    if subprocess.run(command, shell=True, capture_output=True, text=True).returncode == 0:
        return True
    else:
        return False

def ask_for_sudo():
    """
    Try to sudo -v
    :return: True if successful, False if failed.
    """
    if os.geteuid() != 0:
        sudo = subprocess.run("sudo -v", shell=True, capture_output=True, text=True)
        if sudo.returncode == 0:
            return True
        else:
            return False
    else:
        return True

def check_sudo():
    """
    Check if user has sudo privileges.
    If user does not has privilege, tries to authenticate it.
    :return: If the authentication is successful or the user has privilege, prints a dialogue and return nothing.
    If the authentication fails, exit the program with return code 1 and a message to run as sudo.
    """
    print("Trying to authenticate...")
    if os.geteuid() == 0:
        print(Fore.GREEN + "Authenticated.\n")
    else:
        if not ask_for_sudo():
            print(Fore.RED + "Authentication failed.\n")
            exit(1)
        else:
            print(Fore.GREEN + "Authenticated.\n")

def check_command(command):
    """
    Check a command existence.
    e.g. wget, python, cat, ls, etc
    should be called like check_command("wget")
    :param command: Str, name of the command to be checked
    :return: True if exists, False if does not exist
    """
    if not isinstance(command, str):
        raise TypeError("Argument 'command' is not a string.")
    command = "command -v " + str(command)
    if subprocess.run(command, shell=True, capture_output=True, text=True).stdout == "":
        return False
    else:
        return True

def main():
    init(autoreset=True)
    install = Install()
    check_sudo()

    install.installer()

if __name__ == "__main__":
    main()

"""
The graveyard of defs:

    def protonvpn(self):
        print("Downloading and installing protonvpn...", end="")
        try:
            self.install_apt_package("openvpn")
            self.install_apt_package("dialog")
            self.install_apt_package("python3-pip")
            self.install_apt_package("python3-setuptools")
            run_command("sudo pip3 install protonvpn-cli")
            print(Fore.GREEN + " Done.")
        except Exception as e:
            logging.error(e)
            print(Fore.RED + " Failed.")

    def signal(self):
        print("Downloading and installing signal...", end="")
        try:
            run_command("curl -s https://updates.signal.org/desktop/apt/keys.asc | sudo apt-key add -")
            run_command('echo "deb [arch=amd64] https://updates.signal.org/desktop/apt xenial main" | '
                        'sudo tee -a /etc/apt/sources.list.d/signal-xenial.list')
            run_command("sudo apt update")
            self.install_apt_package("signal-desktop")
            print(Fore.GREEN + " Done.")
        except Exception as e:
            logging.error(e)
            print(Fore.RED + " Failed.")

    def riot(self):
        print("Downloading and installing riot...", end="")
        try:
            self.install_apt_package("wget")
            self.install_apt_package("apt-transport-https")
            run_command("sudo wget -O /usr/share/keyrings/riot-im-archive-keyring.gpg "
                        "https://packages.riot.im/debian/riot-im-archive-keyring.gpg")
            run_command('echo "deb [signed-by=/usr/share/keyrings/riot-im-archive-keyring.gpg] '
                        'https://packages.riot.im/debian/ default main" | '
                        'sudo tee /etc/apt/sources.list.d/riot-im.list')
            run_command("sudo apt update")
            self.install_apt_package("riot-desktop")
            print(Fore.GREEN + " Done.")
        except Exception as e:
            logging.error(e)
            print(Fore.RED + " Failed.")

    def discord(self):
        print("Downloading and installing discord...", end="")
        try:

            run_command("sudo wget -O %s/discord.deb "
                        "https://discord.com/api/download?platform=linux&format=deb"
                        % self.tmp_dir)
            run_command("sudo dpkg -i %s/discord.deb" % self.tmp_dir)
            run_command("sudo apt install -f")
            run_command("sudo dpkg -i %s/discord.deb" % self.tmp_dir)
            print(Fore.GREEN + " Done.")
        except Exception as e:
            logging.error(e)
            print(Fore.RED + " Failed.")

    def steam(self):
        print("Downloading and installing steam...", end="")
        try:
            run_command("sudo wget -O %s/steam.deb "
                        "https://steamcdn-a.akamaihd.net/client/installer/steam.deb"
                        % self.tmp_dir)
            run_command("sudo dpkg -i %s/steam.deb" % self.tmp_dir)
            run_command("sudo apt install -f")
            run_command("sudo dpkg -i %s/steam.deb" % self.tmp_dir)
            print(Fore.GREEN + " Done.")
        except Exception as e:
            logging.error(e)
            print(Fore.RED + " Failed.")

    def todoist(self):
        print("Downloading and installing todoist...", end="")
        try:
            run_command("sudo wget -O %s/todoist.deb "
                        "https://github.com/KryDos/todoist-linux/releases/download/1.21/Todoist_1.21.0_amd64.deb"
                        % self.tmp_dir)
            run_command("sudo dpkg -i %s/todoist.deb" % self.tmp_dir)
            run_command("sudo apt install -f")
            run_command("sudo dpkg -i %s/todoist.deb" % self.tmp_dir)
            print(Fore.GREEN + " Done.")
        except Exception as e:
            logging.error(e)
            print(Fore.RED + " Failed.")

    def noip2(self):
        print("Downloading and installing noip2...", end="")
        try:
            pwd_result = subprocess.run("pwd", shell=True, capture_output=True, text=True).stdout
            run_command("sudo wget -O /usr/local/src/noip-duc-linux.tar.gz"
                        "http://www.no-ip.com/client/linux/noip-duc-linux.tar.gz")
            run_command("sudo tar xf /usr/local/src/noip-duc-linux.tar.gz")
            run_command("cd /usr/local/src/noip-2.1.9-1")
            run_command("sudo make")
            run_command("sudo make install")
            run_command("cd %s" % pwd_result)
            print(Fore.GREEN + " Done.")
            print("To later configure noip2 client, use 'sudo noip2 -C'")
        except Exception as e:
            logging.error(e)
            print(Fore.RED + " Failed.")
"""